import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.fd3ec232.js";const g=JSON.parse('{"title":"OMI - Web Components Framework","description":"","frontmatter":{"title":"OMI - Web Components Framework"},"headers":[],"relativePath":"introduction.md","filePath":"introduction.md"}'),o={name:"introduction.md"},p=l(`<h2 id="what-s-omi" tabindex="-1">What&#39;s Omi ？ <a class="header-anchor" href="#what-s-omi" aria-label="Permalink to &quot;What&#39;s Omi ？&quot;">​</a></h2><p>Omi (pronounced /ˈomɪ/) is web components framework base JSX and signal.</p><p><em> Omi looks really neat!<br></em> 　　　　— <a href="https://twitter.com/_developit/" target="_blank" rel="noreferrer">Jason Miller (Creator of Preact)</a></p><p><em> I really like the trend towards &quot;frameworks&quot; that:<br><br><code>class Component extends HTMLElement {..}</code><br> <br>This one, Omi, is from Tencent.</em><br> 　　　　— <a href="https://twitter.com/dalmaer/" target="_blank" rel="noreferrer">Dion Almaer</a></p><h2 id="add-omi-in-one-minute" tabindex="-1">Add Omi in One Minute <a class="header-anchor" href="#add-omi-in-one-minute" aria-label="Permalink to &quot;Add Omi in One Minute&quot;">​</a></h2><h3 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">omi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">omi</span></span></code></pre></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line highlighted"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { render, signal, tag, Component, h } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;omi&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">--</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;counter-demo&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CounterDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">css</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;span { color: red; }&#39;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{sub}&gt;-&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;{count.value}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{add}&gt;+&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;/&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    )</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">counter-demo</span><span style="color:#E1E4E8;"> /&gt;, document.body)</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line highlighted"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { render, signal, tag, Component, h } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;omi&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">() {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  count.value</span><span style="color:#D73A49;">++</span></span>
<span class="line highlighted"><span style="color:#24292E;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">() {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  count.value</span><span style="color:#D73A49;">--</span></span>
<span class="line highlighted"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;counter-demo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line highlighted"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CounterDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">css</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;span { color: red; }&#39;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{sub}&gt;-&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;{count.value}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{add}&gt;+&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;/&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    )</span></span>
<span class="line highlighted"><span style="color:#24292E;">  }</span></span>
<span class="line highlighted"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">counter-demo</span><span style="color:#24292E;"> /&gt;, document.body)</span></span></code></pre></div><p>This code is a simple counter application created using the Omi framework.</p><ul><li>First, we import several functions and classes from the &#39;omi&#39; module, including render, signal, tag, Component, and h.</li><li>Then, we create a signal named count and initialize it to 0. Signals are a type of reactive data source in Omi. When the value of a signal changes, all components that use this signal will be <strong>re-rendered</strong>. Next, we define two functions add and sub, which are used to increase and decrease the value of count, respectively.</li><li>Then, we define a component named CounterDemo. This component uses the @tag decorator to specify its HTML tag name as &#39;counter-demo&#39;. This component has a static property css for defining <strong>scoped styles</strong>, and a render method for defining the content of the component.</li><li>Finally, we use the render function to render the CounterDemo component to document.body.</li></ul><p>Getting started, Congratulations!</p><h2 id="using-omi-cli" tabindex="-1">Using OMI CLI <a class="header-anchor" href="#using-omi-cli" aria-label="Permalink to &quot;Using OMI CLI&quot;">​</a></h2><p>To quickly create an Omi + Vite + TS/JS project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">omi-cli</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-app</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># or create js project by: npx omi-cli init-js my-app</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-app</span><span style="color:#E1E4E8;">           </span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;"># develop</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;"># release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">omi-cli</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my-app</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># or create js project by: npx omi-cli init-js my-app</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my-app</span><span style="color:#24292E;">           </span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;">           </span><span style="color:#6A737D;"># develop</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;">       </span><span style="color:#6A737D;"># release</span></span></code></pre></div>`,15),e=[p];function t(c,r,i,E,y,h){return n(),a("div",null,e)}const u=s(o,[["render",t]]);export{g as __pageData,u as default};
